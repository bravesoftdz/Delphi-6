unit AtmaRat;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics, Data.DB,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.Grids, Vcl.DBGrids,
  Vcl.ComCtrls, IniFiles, Vcl.ExtDlgs;

type
  TForm1 = class(TForm)
    Dtinicial: TDateTimePicker;
    Dtfinal: TDateTimePicker;
    label1: TLabel;
    DBGR03: TDBGrid;
    DBGR05: TDBGrid;
    Label2: TLabel;
    Label3: TLabel;
    Btpesquisa: TButton;
    Label4: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    Btcalcdiferenca: TButton;
    Btratiar: TButton;
    SGresultador05: TStringGrid;
    Label7: TLabel;
    Edlocalbanco: TEdit;
    Btsalvarlbanco: TButton;
    Label8: TLabel;
    Label11: TLabel;
    OpenDialogLocalBanco: TOpenDialog;
    Btlocal: TButton;
    SGerroraliquota: TStringGrid;
    Label10: TLabel;
    Label12: TLabel;
    PageControl1: TPageControl;
    TabSheet1: TTabSheet;
    TabSheet2: TTabSheet;
    DBGcancelado: TDBGrid;
    SGtotalcancel: TStringGrid;
    procedure BtpesquisaClick(Sender: TObject);
    procedure threadr03;
    procedure thread05;
    procedure threadiferenca;
    procedure RatiarMaior5;
    procedure Resultador03;
    procedure Resultador05;
    procedure FormCreate(Sender: TObject);
    procedure BtcalcdiferencaClick(Sender: TObject);
    procedure BtratiarClick(Sender: TObject);
    procedure BtsalvarlbancoClick(Sender: TObject);
    procedure Button5Click(Sender: TObject);
    procedure Comparar04r05;
    procedure pesquisacancelado;
    function Comparaaliquota(tparcial: String; aliquota: String): Boolean;
    procedure BtlocalClick(Sender: TObject);
    procedure RatiarValores;
    procedure CorrigePositivo(i: Integer);
    procedure CorrigeNegativo(i: Integer);
    procedure PesquisaR03R05;
    procedure TotalizaCancelado;
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form1: TForm1;

  // teste : MinhaThread;
implementation

{$R *.dfm}

uses Udm, Utread, Utreadr05, Utreaddiferenca, FMTBcd, Umenssagem, Utreadrateio;

procedure TForm1.Resultador03;
begin
  try
    dm.ClientDataSet1.Open;
    thread05;
  except
    on E: Exception do
    begin
      ShowMessage(E.Message);

    end;
  end;

end;

procedure TForm1.Resultador05;
begin
  try
    dm.ClientDataSet2.Open;
    pesquisacancelado;
  except
    on E: Exception do
      ShowMessage(E.Message);
  end;
  Label5.Caption := 'Pesquisa Concluida';
end;

procedure TForm1.pesquisacancelado;
begin
  Label11.Caption := 'Pesquisa sendo Processada';
  dm.ClientDataSetVerificaR04.Close;
  dm.SQLConnection1.Close;
  dm.SQLDataSetVerificaR04.ParamByName('DAT1').AsDate := Dtinicial.Date;
  dm.SQLDataSetVerificaR04.ParamByName('DAT2').AsDate := Dtfinal.Date;
  dm.ClientDataSetVerificaR04.Open;
  Label11.Caption := 'Pesquisa concluida';
  Label12.Caption := IntToStr(dm.ClientDataSetVerificaR04.RecordCount);
  TotalizaCancelado;
  TFormmenssagem.Close;
  Form1.Enabled := true;
end;

procedure TForm1.TotalizaCancelado;
var
  i: Integer;

  nf: String;
  cont: Integer;
  conf: String;
begin
  cont := 0;
  nf := '';
  i := 0;
  if dm.ClientDataSetVerificaR04.RecordCount > 0 then
  begin
    nf := dm.ClientDataSetVerificaR04NRFAB.Value;
    while i < dm.ClientDataSetVerificaR04.RecordCount do
    begin
      if dm.ClientDataSetVerificaR04NRFAB.Value = nf then
      begin
        i := i + 1;
        cont := cont + 1;
        dm.ClientDataSetVerificaR04.Next;

      end
      else
      begin
        SGtotalcancel.RowCount := SGtotalcancel.RowCount + 1;
        SGtotalcancel.Cells[0, SGtotalcancel.RowCount - 1] := nf;
        SGtotalcancel.Cells[1, SGtotalcancel.RowCount - 1] := IntToStr(cont);
        cont := 0;
        nf := dm.ClientDataSetVerificaR04NRFAB.Value;
      end;

    end;
  end;
  SGtotalcancel.RowCount := SGtotalcancel.RowCount + 1;
  SGtotalcancel.Cells[0, SGtotalcancel.RowCount - 1] := nf;
  SGtotalcancel.Cells[1, SGtotalcancel.RowCount - 1] := IntToStr(cont);
end;

procedure TForm1.BtlocalClick(Sender: TObject);
begin
  if OpenDialogLocalBanco.Execute then
    Edlocalbanco.Text := OpenDialogLocalBanco.FileName;
end;

procedure TForm1.BtpesquisaClick(Sender: TObject);

begin
  TFormmenssagem.Show;
  Form1.Enabled := false;
  PesquisaR03R05;
  // thread05;

end;

procedure TForm1.PesquisaR03R05;
begin

  SGresultador05.RowCount := 1;
  SGerroraliquota.RowCount := 1;
  SGtotalcancel.RowCount := 1;
  Label7.Caption := '';
  threadr03;
end;

procedure TForm1.threadr03;
var
  Teste: MinhaThread;
begin
  dm.ClientDataSet1.Close;
  dm.SQLConnection1.Close;
  Label4.Caption := 'Pesquisa sendo Processada';
  dm.SQLDataSet1.ParamByName('dtinicial').AsDate := Dtinicial.Date;
  dm.SQLDataSet1.ParamByName('dtfinal').AsDate := Dtfinal.Date;
  Teste := MinhaThread.Create(true);
  Teste.FreeOnTerminate := true;
  Teste.Priority := tpNormal;
  Teste.Resume;

end;

procedure TForm1.thread05;
var
  Teste: Threadr05;
begin
  try
    dm.ClientDataSet2.Close;
    dm.SQLConnection1.Close;
    Label5.Caption := 'Pesquisa sendo Processada';
    dm.SQLDataSet2.ParamByName('dtinicial').AsDate := Dtinicial.Date;
    dm.SQLDataSet2.ParamByName('dtfinal').AsDate := Dtfinal.Date;
    Teste := Threadr05.Create(true);
    Teste.FreeOnTerminate := true;
    Teste.Priority := tpNormal;
    Teste.Resume;
  except
    on E: Exception do
      ShowMessage(E.Message);
  end;
end;

procedure TForm1.threadiferenca;
var
  thread: ThreadDiferenca;
begin
  try
    thread := ThreadDiferenca.Create();
    thread.FreeOnTerminate := true;
    thread.Priority := tpNormal;
    thread.Resume
  except
    on E: Exception do
      ShowMessage(E.Message);
  end;

end;

procedure TForm1.BtcalcdiferencaClick(Sender: TObject);
begin
  TFormmenssagem.Show;
  Form1.Enabled := false;
  SGerroraliquota.RowCount := 1;
  Label7.Caption := 'Calculo sendo Feito';
  Btpesquisa.Enabled := false;
  Btcalcdiferenca.Enabled := false;
  Btratiar.Enabled := false;
  DBGR03.Enabled := false;
  DBGR05.Enabled := false;
  threadiferenca;
  // testediferenca;

end;

procedure TForm1.Comparar04r05;
var
  i: Integer;
  j: Integer;
var
  v1: Real;
var
  aliq: String;
begin
  dm.ClientDataSet1.First;
  dm.ClientDataSet2.First;
  SGresultador05.RowCount := 1;
  for i := +1 to dm.ClientDataSet1.RecordCount do
  begin
    dm.ClientDataSet2.Filtered := false;
    dm.ClientDataSet2.Filter := 'NRFAB like ''%' + dm.ClientDataSet1NRFAB.Value
      + '%'' AND TPARCIAL like ''%' + dm.ClientDataSet1TPARCIAL.Value + '%''';
    dm.ClientDataSet2.Filtered := true;

    for j := +1 to dm.ClientDataSet2.RecordCount do
    begin
      if Comparaaliquota(dm.ClientDataSet2TPARCIAL.Value,
        dm.ClientDataSet2CALIQ.Value) then
      begin
        if dm.ClientDataSet1EMISSAOD.Value = dm.ClientDataSet2EMISSAOD.Value
        then
        begin
          if dm.ClientDataSet1NRFAB.Value = dm.ClientDataSet2NRFAB.Value then
          begin
            if dm.ClientDataSet1TPARCIAL.Value = dm.ClientDataSet2TPARCIAL.Value
            then
            begin
              if dm.ClientDataSet1SUM.Value <> dm.ClientDataSet2SUM.Value then
              begin
                SGresultador05.RowCount := SGresultador05.RowCount + 1;
                SGresultador05.Cells[0, SGresultador05.RowCount - 1] :=
                  dm.ClientDataSet1NRFAB.Value;
                SGresultador05.Cells[1, SGresultador05.RowCount - 1] :=
                  dm.ClientDataSet2CALIQ.Value;
                SGresultador05.Cells[2, SGresultador05.RowCount - 1] :=
                  DateToStr(dm.ClientDataSet1EMISSAOD.Value);
                SGresultador05.Cells[3, SGresultador05.RowCount - 1] :=
                  BcdToStr(dm.ClientDataSet1SUM.Value -
                  dm.ClientDataSet2SUM.Value);
                v1 := (StrToFloat(SGresultador05.Cells[3,
                  SGresultador05.RowCount - 1]) /
                  BcdToDouble(dm.ClientDataSet2SUM.Value)) * 100;
                SGresultador05.Cells[4, SGresultador05.RowCount - 1] :=
                  FormatFloat('0.0000', v1);
              end;
            end;
          end;
        end;
      end;
      dm.ClientDataSet2.Next;
    end;
    dm.ClientDataSet1.Next;
  end;
  Label7.Caption := 'Calculo Terminado';
  Btpesquisa.Enabled := true;
  Btcalcdiferenca.Enabled := true;
  Btratiar.Enabled := true;
  DBGR03.Enabled := true;
  DBGR05.Enabled := true;
  dm.ClientDataSet2.Filtered := false;
  TFormmenssagem.Close;
  Form1.Enabled := true;
end;

procedure TForm1.BtratiarClick(Sender: TObject);
var
  thread: ThreadRateio;
begin
  if SGresultador05.RowCount > 1 then
  begin
    if dm.ClientDataSetVerificaR04.RecordCount = 0 then
    begin
      if SGerroraliquota.RowCount = 1 then
      begin

        try
          TFormmenssagem.Show;

          Form1.Enabled := false;
          TFormmenssagem.Lbmenssagem.Caption := 'RATEIO SENDO PROCESSADO';
          thread := ThreadRateio.Create();
          thread.FreeOnTerminate := true;
          thread.Priority := tpNormal;
          thread.Resume;
        except
          on E: Exception do
            ShowMessage(E.Message);
        end;
        exit;
      end;
    end;
    ShowMessage('Por Favor Corrija os erros !!!');
  end
  else
  begin
    ShowMessage('Não a Valor Para Ser Corrigido');
  end;

end;

procedure TForm1.RatiarValores;
var
  i: Integer;
begin
  for i := 1 to SGresultador05.RowCount - 1 do
  begin
    if StrToFloat(SGresultador05.Cells[3, i]) > 0 then
    begin
      CorrigePositivo(i);
      // passa como parametro a posição da linha na String Grid
    end
    else
    begin
      CorrigeNegativo(i);
      // passa como parametro a posicao da linha na string Grid
    end;
  end;
  // RatiarMaior5;  //ratia meio que 5
  // ShowMessage('Rateio Efetuado Com Sucesso');
end;

procedure TForm1.CorrigePositivo(i: Integer);
var
  j: Integer;
  id: Integer;
  sql: String;
begin
  dm.SQLConnection1.Close;
  dm.ClientDataSetpesqr05positivo.Close;

  dm.SQLDataSetpesqr05positivo.ParamByName('serie').AsString :=
    SGresultador05.Cells[0, i];
  dm.SQLDataSetpesqr05positivo.ParamByName('dt').AsDate :=
    StrToDate(SGresultador05.Cells[2, i]);
  dm.SQLDataSetpesqr05positivo.ParamByName('caliq').AsString :=
    SGresultador05.Cells[1, i];
  dm.ClientDataSetpesqr05positivo.Open;

  dm.ClientDataSetpesqr05positivo.First;
  id := 0;
  for j := 1 to dm.ClientDataSetpesqr05positivo.RecordCount do
  begin
    if BcdToInteger(dm.ClientDataSetpesqr05positivoID_R05_SG.Value) > id then
    begin
      id := BcdToInteger(dm.ClientDataSetpesqr05positivoID_R05_SG.Value);
    end;
    dm.ClientDataSetpesqr05positivo.Next;
  end;
  // ShowMessage('Id da tabela' + IntToStr(id) + 'Valor' +
  // SGresultador05.Cells[3, i]);
  dm.ClientDataSetpesqr05positivo.Close; // fecha conexao pesquisa positivo;
  dm.SQLQueryAtualizaValorR05.Close;
  dm.SQLConnection1.Close;
  dm.SQLQueryAtualizaValorR05.sql.Clear;
  sql := 'update r05 set BICMS2=(BICMS2+(:valor)),BICMS7=(BICMS7+(:valor)),VLIQ=(VLIQ+(:valor)),vrunit=(vrunit+(:valor)),TITEMB=(TITEMB+(:valor)) where id_r05_sg=:id';
  dm.SQLQueryAtualizaValorR05.sql.Text := sql;
  dm.SQLQueryAtualizaValorR05.ParamByName('valor').AsFMTBCD :=
    SGresultador05.Cells[3, i];
  dm.SQLQueryAtualizaValorR05.ParamByName('id').AsString := IntToStr(id);
  dm.SQLQueryAtualizaValorR05.ExecSQL(false);

end;

procedure TForm1.CorrigeNegativo(i: Integer);
var
  j: Integer;
  valor: Real;
  sql: String;
  id: Integer;
begin

  dm.SQLConnection1.Close;
  dm.ClientDataSetpesqr05valores.Close;
  dm.SQLDataSetpesqr05valores.ParamByName('serie').AsString :=
    SGresultador05.Cells[0, i];
  dm.SQLDataSetpesqr05valores.ParamByName('dt').AsDate :=
    StrToDate(SGresultador05.Cells[2, i]);
  dm.SQLDataSetpesqr05valores.ParamByName('caliq').AsString :=
    SGresultador05.Cells[1, i];
  dm.ClientDataSetpesqr05valores.Open;
  dm.ClientDataSetpesqr05valores.First;
  valor := 0.00;

  for j := 1 to dm.ClientDataSetpesqr05valores.RecordCount do
  begin
    if BcdToDouble(dm.ClientDataSetpesqr05valoresTITEMB.Value) > valor then
    begin
      // valor := BcdToDouble(dm.ClientDataSetpesqr05valoresTITEMB.Value);
      id := dm.ClientDataSetpesqr05valoresID_R05_SG.Value;
    end;
    dm.ClientDataSetpesqr05valores.Next;
  end;

  if valor > StrToFloat(SGresultador05.Cells[3, i]) then
  begin
    // ShowMessage('Menor que 0' + FloatToStr(valor) + '' +
    // SGresultador05.Cells[3, i]);
    dm.SQLQueryAtualizaValorR05.Close;
    dm.SQLConnection1.Close;
    dm.SQLQueryAtualizaValorR05.sql.Clear;
    sql := 'update r05 set BICMS2=(TITEMB+(:valor)),BICMS7=(TITEMB+(:valor)),VLIQ=(TITEMB+(:valor)),qtde=1,vrunit=(TITEMB+(:valor)),TITEMB=(TITEMB+(:valor)) where id_r05_sg=:id';
    dm.SQLQueryAtualizaValorR05.sql.Text := sql;
    dm.SQLQueryAtualizaValorR05.ParamByName('valor').AsFMTBCD :=
      SGresultador05.Cells[3, i];
    dm.SQLQueryAtualizaValorR05.ParamByName('id').AsInteger := id;
    dm.SQLQueryAtualizaValorR05.ExecSQL(false);

  end
  else
  begin
    ShowMessage('Maior que o calculado' + SGresultador05.Cells[3, i]);
  end;

  dm.ClientDataSetpesqr05valores.Close;
end;

procedure TForm1.BtsalvarlbancoClick(Sender: TObject);
var
  config: TIniFile;
begin
  config := TIniFile.Create('C:\Atmarat\config.ini');
  config.WriteString('BANCO_DE_DADOS', 'Database', Edlocalbanco.Text);
  config.Free;
  ShowMessage('Ini Alterado');

  Application.Terminate;

end;

procedure TForm1.Button5Click(Sender: TObject);
begin
  Label11.Caption := 'Pesquisa sendo Processada';
  dm.ClientDataSetVerificaR04.Close;
  dm.SQLConnection1.Close;
  dm.SQLDataSetVerificaR04.ParamByName('DAT1').AsDate := Dtinicial.Date;
  dm.SQLDataSetVerificaR04.ParamByName('DAT2').AsDate := Dtfinal.Date;
  dm.ClientDataSetVerificaR04.Open;
  Label11.Caption := 'Pesquisa concluida';
end;

procedure TForm1.RatiarMaior5; // Metodo nao esta sendo utilizado
var
  i: Integer;
  sql: string;
begin
  for i := +1 to (SGresultador05.RowCount - 1) do
  begin

    if (StrToFloat(SGresultador05.Cells[3, i]) > (1)) then
    begin

      dm.SQLQueryAtualizaValorR05.Close;
      dm.SQLConnection1.Close;
      dm.SQLQueryAtualizaValorR05.sql.Clear;

      sql := 'update r05 set bicms2=cast(bicms2+bicms2*cast((:porcentagem) as numeric(10,7))/100 as numeric(10,2)),';
      sql := sql +
        'BICMS7=cast(BICMS7+BICMS7*cast((:porcentagem) as numeric(10,7))/100 as numeric(10,2)),';
      sql := sql +
        'VLIQ=cast(VLIQ+VLIQ*cast((:porcentagem) as numeric(10,7))/100 as numeric(10,2)),';
      sql := sql +
        'vrunit=cast(vrunit+vrunit*cast((:porcentagem) as numeric(10,7))/100 as numeric(10,2)),';
      sql := sql +
        'TITEMB=cast(TITEMB+TITEMB*cast((:porcentagem) as numeric(10,7))/100 as numeric(10,2))';
      sql := sql +
        'where NRFAB= :serie AND EMISSAOD= :data AND CALIQ= :aliquota and cancel=''N''';

      dm.SQLQueryAtualizaValorR05.sql.Text := sql;
      dm.SQLQueryAtualizaValorR05.ParamByName('porcentagem').AsFloat :=
        StrToFloat(SGresultador05.Cells[4, i]);

      dm.SQLQueryAtualizaValorR05.ParamByName('serie').AsString :=
        SGresultador05.Cells[0, i];

      dm.SQLQueryAtualizaValorR05.ParamByName('data').AsDate :=
        StrToDate(SGresultador05.Cells[2, i]);

      dm.SQLQueryAtualizaValorR05.ParamByName('aliquota').AsString :=
        SGresultador05.Cells[1, i];

      dm.SQLQueryAtualizaValorR05.ExecSQL(false);

    end;

    if (StrToFloat(SGresultador05.Cells[3, i]) < (-1)) then
    begin

      dm.SQLQueryAtualizaValorR05.Close;
      dm.SQLConnection1.Close;
      dm.SQLQueryAtualizaValorR05.sql.Clear;

      sql := 'update r05 set bicms2=cast(bicms2+bicms2*cast((:porcentagem) as numeric(10,7))/100 as numeric(10,2)),';
      sql := sql +
        'BICMS7=cast(BICMS7+BICMS7*cast((:porcentagem) as numeric(10,7))/100 as numeric(10,2)),';
      sql := sql +
        'VLIQ=cast(VLIQ+VLIQ*cast((:porcentagem) as numeric(10,7))/100 as numeric(10,2)),';
      sql := sql +
        'vrunit=cast(vrunit+vrunit*cast((:porcentagem) as numeric(10,7))/100 as numeric(10,2)),';
      sql := sql +
        'TITEMB=cast(TITEMB+TITEMB*cast((:porcentagem) as numeric(10,7))/100 as numeric(10,2))';
      sql := sql +
        'where NRFAB= :serie AND EMISSAOD= :data AND CALIQ= :aliquota and cancel=''N''';

      dm.SQLQueryAtualizaValorR05.sql.Text := sql;
      dm.SQLQueryAtualizaValorR05.ParamByName('porcentagem').AsFloat :=
        StrToFloat(SGresultador05.Cells[4, i]);

      dm.SQLQueryAtualizaValorR05.ParamByName('serie').AsString :=
        SGresultador05.Cells[0, i];

      dm.SQLQueryAtualizaValorR05.ParamByName('data').AsDate :=
        StrToDate(SGresultador05.Cells[2, i]);

      dm.SQLQueryAtualizaValorR05.ParamByName('aliquota').AsString :=
        SGresultador05.Cells[1, i];

      dm.SQLQueryAtualizaValorR05.ExecSQL(false);

    end;
  end;
  ShowMessage('Rateio Efetuado');
end;

function TForm1.Comparaaliquota(tparcial: string; aliquota: string): Boolean;
var
  aliq: String;
  verrepetido: Boolean;
  i: Integer;
begin
  verrepetido := false;
  aliq := copy(tparcial, 3, 1) + '' + copy(tparcial, 1, 2);
  if aliquota = aliq then
  begin
    Result := true;
    exit;
  end;
  if aliquota = 'STB' then
  begin
    Result := true;
    exit;
  end;
  if aliquota = 'IST' then
  begin
    Result := true;
    exit;
  end;
  // verifica se a registro repetido na String Grid aliquota
  for i := +1 to SGerroraliquota.RowCount do
  begin
    if SGerroraliquota.Cells[0, i] = dm.ClientDataSet2NRFAB.Value then
    begin
      if SGerroraliquota.Cells[1, i] = DateToStr(dm.ClientDataSet2EMISSAOD.Value)
      then
      begin
        if SGerroraliquota.Cells[2, i] = dm.ClientDataSet2TPARCIAL.Value then
        begin
          if SGerroraliquota.Cells[3, i] = dm.ClientDataSet2CALIQ.Value then
          begin
            verrepetido := true;
          end;
        end;
      end;
    end;
  end;
  // se nao haver registro repetido insere novo
  if not verrepetido then
  begin
    SGerroraliquota.RowCount := SGerroraliquota.RowCount + 1;
    SGerroraliquota.Cells[0, SGerroraliquota.RowCount - 1] :=
      dm.ClientDataSet2NRFAB.Value;
    SGerroraliquota.Cells[1, SGerroraliquota.RowCount - 1] :=
      DateToStr(dm.ClientDataSet2EMISSAOD.Value);
    SGerroraliquota.Cells[2, SGerroraliquota.RowCount - 1] :=
      dm.ClientDataSet2TPARCIAL.Value;
    SGerroraliquota.Cells[3, SGerroraliquota.RowCount - 1] :=
      dm.ClientDataSet2CALIQ.Value;
    Result := false;
  end;
end;

procedure TForm1.FormCreate(Sender: TObject);
var
  config: TIniFile;
  nome_bd: String;
  versao: String;
begin

  Form1.Caption := Form1.Caption + ' Beta: 01.01.05';
  SGresultador05.Cells[0, 0] := 'ECF';
  SGresultador05.ColWidths[0] := 130;
  SGresultador05.Cells[1, 0] := 'ALIQUOTA';
  SGresultador05.Cells[2, 0] := 'DATA';
  SGresultador05.Cells[3, 0] := 'VALOR';
  SGresultador05.Cells[4, 0] := 'PORCENTAGEM';
  SGresultador05.ColWidths[4] := 100;

  SGerroraliquota.Cells[0, 0] := 'ECF';
  SGerroraliquota.ColWidths[0] := 130;
  SGerroraliquota.Cells[1, 0] := 'DATA';
  SGerroraliquota.Cells[2, 0] := 'TPARCIAL';
  SGerroraliquota.Cells[3, 0] := 'ALIQ';
  SGerroraliquota.ColWidths[3] := 35;

  SGtotalcancel.Cells[0, 0] := 'ECF';
  SGtotalcancel.ColWidths[0] := 130;
  SGtotalcancel.Cells[1, 0] := 'TOTAL DE CANCELADOS';
  SGtotalcancel.ColWidths[1] := 130;

  // se nao existir arquivo ele cria
  if not FileExists('.\config.ini') then
  begin
    config := TIniFile.Create('.\config.ini');
    config.WriteString('BANCO_DE_DADOS', 'Database', Edlocalbanco.Text);
    config.WriteString('BANCO_DE_DADOS', 'User_Name', 'SYSDBA');
    config.WriteString('BANCO_DE_DADOS', 'Password', 'masterkey');
    config.WriteString('VERSAO', 'Version', '0');
    config.WriteString('VERSAO', 'Release', '0');
    config.WriteString('VERSAO', 'Build', '0');
    config.Free;
    ShowMessage('Arquivo ini criado');
  end;
  // se existir ele le
  if FileExists('.\config.ini') then
  begin
    config := TIniFile.Create('.\config.ini');
    nome_bd := config.ReadString('BANCO_DE_DADOS', 'database', '');
    versao:=config.ReadString('VERSAO','Build','');
    versao:=IntToStr(strtoInt(versao)+1);
    config.WriteString('VERSAO','Build',versao);
    Edlocalbanco.Text := nome_bd;
    config.Free;
  end;
end;

end.
